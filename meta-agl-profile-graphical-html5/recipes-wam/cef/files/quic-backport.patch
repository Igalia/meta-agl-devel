Fix GCC compilation of QuicCryptoStream

This is a backport of e251509 from quiche repo

Upstream-Status: ???
Signed-off-by: Alexander Dunaev <agunaev@igalia.com>

--- a/net/third_party/quiche/src/quic/core/quic_crypto_stream.cc
+++ b/net/third_party/quiche/src/quic/core/quic_crypto_stream.cc
@@ -33,10 +33,10 @@ QuicCryptoStream::QuicCryptoStream(QuicSession* session)
           QuicVersionUsesCryptoFrames(session->transport_version())
               ? CRYPTO
               : BIDIRECTIONAL),
-      substreams_{{this, ENCRYPTION_INITIAL},
-                  {this, ENCRYPTION_HANDSHAKE},
-                  {this, ENCRYPTION_ZERO_RTT},
-                  {this, ENCRYPTION_FORWARD_SECURE}} {
+      substreams_{{{this, ENCRYPTION_INITIAL},
+                   {this, ENCRYPTION_HANDSHAKE},
+                   {this, ENCRYPTION_ZERO_RTT},
+                   {this, ENCRYPTION_FORWARD_SECURE}}} {
   // The crypto stream is exempt from connection level flow control.
   DisableConnectionFlowControlForThisStream();
 }
--- a/net/third_party/quiche/src/quic/core/quic_crypto_stream.h
+++ b/net/third_party/quiche/src/quic/core/quic_crypto_stream.h
@@ -5,6 +5,7 @@
 #ifndef QUICHE_QUIC_CORE_QUIC_CRYPTO_STREAM_H_
 #define QUICHE_QUIC_CORE_QUIC_CRYPTO_STREAM_H_

+#include <array>
 #include <cstddef>
 #include <string>

@@ -179,7 +179,7 @@ class QUIC_EXPORT_PRIVATE QuicCryptoStream : public QuicStream {

   // Keeps state for data sent/received in CRYPTO frames at each encryption
   // level.
-  CryptoSubstream substreams_[NUM_ENCRYPTION_LEVELS];
+  std::array<CryptoSubstream, NUM_ENCRYPTION_LEVELS> substreams_;
 };

 }  // namespace quic
